// Generated by CoffeeScript 1.6.3
(function() {
  var async, copyComponents, copyScript, copyScriptTo, extractMain, flatsplat, fs, inBowerDir, mainFromFolder, path, readJSON, resolveComponents, _,
    __slice = [].slice;

  fs = require("fs-extra");

  _ = require("underscore");

  path = require("path");

  async = require("async");

  flatsplat = function(list) {
    if (list.length === 1 && _.isArray(list[0])) {
      return list[0];
    } else {
      return list;
    }
  };

  inBowerDir = function() {
    var pathParts, _path;
    pathParts = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    pathParts = ["bower_components/"].concat(flatsplat(pathParts));
    _path = path.join.apply(null, pathParts);
    return _path;
  };

  readJSON = function(filePath, cb) {
    return fs.readFile(filePath, "utf8", function(err, res) {
      var _json;
      _json = JSON.parse(res);
      return cb(null, _json);
    });
  };

  extractMain = function(filePath, data, cb) {
    var mainPath, relativeRegex, _main, _match, _pd;
    _main = data.main;
    if (_main == null) {
      return null;
    }
    relativeRegex = /^\.\/(.+)$/im;
    _match = relativeRegex.exec(_main);
    if (_match != null) {
      _main = _match[1];
    }
    console.log(_main);
    console.log(filePath);
    _pd = path.dirname(filePath);
    console.log(_pd);
    mainPath = path.join(path.dirname(filePath), _main);
    console.log(mainPath);
    return mainPath;
  };

  mainFromFolder = function(folderName, cb) {
    var _filePath;
    _filePath = inBowerDir(folderName, ".bower.json");
    return readJSON(_filePath, function(err, pkg) {
      var mainPath;
      mainPath = extractMain(_filePath, pkg);
      if (mainPath != null) {
        return cb(null, {
          component: folderName,
          main: mainPath
        });
      } else {
        _filePath = inBowerDir(folderName, "package.json");
        return readJSON(_filePath, function(err, pkg) {
          mainPath = extractMain(_filePath, pkg);
          return cb(null, {
            component: folderName,
            main: mainPath
          });
        });
      }
    });
  };

  copyScript = function(scriptRef, outputDir, cb) {
    var outputPath, scriptPath;
    scriptPath = scriptRef.main;
    outputPath = path.join(outputDir, scriptRef.component) + ".js";
    return fs.copy(scriptPath, outputPath, function(err) {
      return cb(null, {
        src: scriptPath,
        dest: outputPath
      });
    });
  };

  copyScriptTo = function(outputDir) {
    return function(scriptRef, cb) {
      return copyScript(scriptRef, outputDir, cb);
    };
  };

  copyComponents = function(options, cb) {
    var _opts;
    _opts = _.clone(options);
    if (_opts.src == null) {
      _opts.src = "./bower_components";
    }
    if (_opts.dest == null) {
      throw new Error("No destination specified.");
    }
    return fs.readdir(_opts.src, function(err, folders) {
      return async.map(folders, mainFromFolder, function(err, completed) {
        return async.map(completed, copyScriptTo(_opts.dest), function(err, copied) {
          return cb(null, copied);
        });
      });
    });
  };

  resolveComponents = function(bowerDir, cb) {
    if (_.isFunction(bowerDir)) {
      cb = bowerDir;
      bowerDir = "./bower_components";
    }
    return fs.readdir(bowerDir, function(err, folders) {
      return async.map(folders, mainFromFolder, function(err, resolved) {
        return cb(null, resolved);
      });
    });
  };

  module.exports = {
    copyComponents: copyComponents,
    resolveComponents: resolveComponents
  };

}).call(this);
